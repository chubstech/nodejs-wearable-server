{"version":3,"sources":["components/IoTChart.js","pages/Home.js","components/ReportTableAPI.js","components/ReportChart.js","pages/Report.js","pages/Help.js","App.js","serviceWorker.js","index.js"],"names":["IoTChart","fetch","then","response","json","devices","jsonUsers","JSON","stringify","parse","map","e","userType","baseAPIURL","makeAPIRequest","user_id","info","today","Math","floor","Date","getTime","past","round","filteredJson","filter","time_obs","dict","Object","time","loudness","unixStorage","niceTime","dateObj","hours","getHours","minutes","getMinutes","ampm","makeNiceTime","db_reading","canvas","document","createElement","chartId","id","createTextNode","querySelector","appendChild","context","getElementById","getContext","window","Chart","type","data","labels","keys","reverse","datasets","label","padding","values","borderColor","backgroundColor","lineTension","borderWidth","borderDash","options","title","display","text","position","fontSize","fontColor","layout","top","bottom","scales","xAxes","scaleLabel","labelString","ticks","maxTicksLimit","yAxes","beginAtZero","annotation","drawTime","annotations","mode","scaleID","value","Component","updateChartMethod","console","log","chart","i","length","includes","push","update","updateChartHelper","setTimeout","Home","React","color_count","createDataset","user_file","user","colors","help","json_data","peak","peaktimes","avg","avgBase","last_12hours","activeHour","dbAvg","hourlyNumCount","final_result","zero_hr","zeroNumCount","getDate","toLocaleString","startIndex","s","getAvgHourlyData","result","fill","chartOptions","showScale","pointDot","getTimeAxis","axis_list","time_stamps","currentHr","decrementedHr","unshift","a","ReportChart","props","chartReference","createRef","state","chartData","json_files","dataset_list","forEach","item","dataset","setState","className","ref","this","height","width","key","Report","curr","Button","variant","size","onClick","preventDefault","print","toLocaleDateString","Help","App","Container","basename","Navbar","bg","expand","Brand","as","Link","to","Toggle","aria-controls","Collapse","Nav","NavLink","exact","path","component","from","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e1086401.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Chart from \"chart.js\";\nimport 'chartjs-plugin-annotation';\n\nfunction makeAPIRequest(userType) {\n    var baseAPIURL = 'https://cors-anywhere.herokuapp.com/https://noise-wearable.herokuapp.com/api/noise_observation/user/';\n    baseAPIURL = baseAPIURL + userType;\n    return fetch(baseAPIURL)\n        .then((response) => {\n            return response.json();\n        })\n        .then(json => {\n            var jsonTest = json;\n            return jsonTest;\n        });\n}\n\nfunction makeAPIRequestUsers() {\n    return fetch('https://cors-anywhere.herokuapp.com/https://noise-wearable.herokuapp.com/api/users')\n        .then((response) => {\n            return response.json();\n        })\n        .then(json => {\n            var jsonTest = json;\n            return jsonTest;\n        });\n}\n\nfunction getLoudestOne(time, loudness, unixStorage)\n{\n    if(time in unixStorage){\n        if (unixStorage[time] < loudness) {\n            unixStorage[time] = loudness\n        }\n    }\n    else {\n        unixStorage[time] = loudness\n    }\n}\n\nfunction makeNiceTime(dateObj)\n{\n  var hours = dateObj.getHours();\n  // Get minutes part from the timestamp\n  var minutes = dateObj.getMinutes();\n  // Get seconds part from the timestamp\n  var ampm = hours >= 12 ? 'pm' : 'am';\n  hours = hours % 12;\n  hours = hours ? hours : 12; // the hour '0' should be '12'\n  minutes = minutes < 10 ? '0'+minutes : minutes;\n  var strTime = hours + ':' + minutes + ' ' + ampm;\n  return strTime;\n\n}\n\n\nexport default class IoTChart extends Component {\n    componentDidMount() {\n        var promiseA = makeAPIRequestUsers().then(devices => {\n            var jsonUsers = JSON.stringify(devices);\n            jsonUsers = JSON.parse(jsonUsers);\n            jsonUsers.map(function (e) {\n                var promiseB = makeAPIRequest(e.user_id).then(info => {\n                    var json = JSON.stringify(info);\n                    json = JSON.parse(json);\n                    var today = Math.floor(new Date().getTime()/1000.0);\n                    var past = Math.round(today - 7200);\n                    var filteredJson = json.filter(function (e) {\n                        if (e.time_obs >= past && e.time_obs < today) {\n                            return e.time_obs;\n                        }\n                    }\n                    );\n                    var dict = new Object();\n                    filteredJson.map(function (e) {\n                        var timeStampDate = new Date(e.time_obs * 1000);\n                        var niceTime = makeNiceTime(timeStampDate);\n                        getLoudestOne(niceTime, e.db_reading, dict);\n                    });\n                    var canvas = document.createElement('canvas'),\n                    chartId = 'chart' + e.user_id;\n                    canvas.id = chartId;\n                    var chartLabel = document.createTextNode(e.user_id);\n                    document.querySelector(\"#chartContainer\").appendChild(canvas);\n\n                    var context = document.getElementById(chartId).getContext('2d');\n                    window[chartId] = new Chart(context, {\n                        type: 'line',\n                        data: {\n                            //Bring in data\n                            labels: Object.keys(dict).reverse(),\n                            datasets: [\n                                // Displays each element in a legend above chart\n                                {\n                                    label: \"DB Levels\",\n                                    padding: 100,\n                                    data: Object.values(dict).reverse(),\n                                    borderColor: 'rgb(135, 188, 200)',\n                                    backgroundColor: 'rgba(147, 215, 245, 0.5)',\n                                    lineTension: 0\n                                },\n                                {\n                                    label: \"Peaceful\",\n                                    borderColor: 'rgb(33, 150, 64)',\n                                    borderWidth: 2,\n                                    backgroundColor: 'rgba(33, 150, 64, 0.5)',\n                                    borderDash: [10, 5],\n                                },\n                                {\n                                    label: \"Disruptive\",\n                                    borderColor: 'rgba(255, 146, 0, 0.8)',\n                                    backgroundColor: 'rgba(255, 146, 0, 0.5)',\n                                    borderWidth: 2,\n                                    borderDash: [10, 5],\n\n                                },\n                                {\n                                    label: \"Harmful\",\n                                    borderColor: 'rgb(255, 25, 25)',\n                                    backgroundColor: 'rgba(255, 25, 25, 0.5)',\n                                    borderWidth: 2,\n                                    borderDash: [10, 5],\n                                }\n                            ]\n                        },\n                        options: {\n                            title: {\n                                display: true,\n                                text: e.user_id,\n                                position: 'top',\n                                fontSize: 30,\n                                fontColor: '#000000'\n                            },\n                            layout: {\n                                padding: {\n                                    top: 20,\n                                    bottom: 20\n                                }\n                            },\n                            scales: {\n                                xAxes: [{\n                                    scaleLabel: {\n                                        display: true,\n                                        labelString: 'Time (hh:mm 12-Hour)'\n                                    },\n                                    ticks: {\n                                        maxTicksLimit: 20\n                                    }\n                                }],\n                                yAxes: [{\n                                    scaleLabel: {\n                                        display: true,\n                                        labelString: 'Recorded Decibels (dB)'\n                                    },\n                                    ticks: {\n                                        beginAtZero: true\n                                    }\n                                }],\n                            },\n                            annotation: {\n                                drawTime: 'afterDatasetsDraw',\n                                annotations: [\n                                    {\n                                        drawTime: 'afterDraw',\n                                        id: 'good', // optional\n                                        type: 'line',\n                                        mode: 'horizontal',\n                                        scaleID: 'y-axis-0',\n                                        value: '35',\n                                        borderColor: 'rgba(33, 150, 64, 0.8)',\n                                        borderWidth: 2,\n                                        borderDash: [10, 5]\n                                    },\n                                    {\n                                        drawTime: 'afterDraw',\n                                        id: 'warning', // optional\n                                        type: 'line',\n                                        mode: 'horizontal',\n                                        scaleID: 'y-axis-0',\n                                        value: '48',\n                                        //borderColor: 'rgba(255, 254, 0, 0.8)',\n                                        borderColor: 'rgba(255, 146, 0, 0.8)',\n                                        borderWidth: 2,\n                                        borderDash: [10, 5]\n                                    },\n                                    {\n                                        drawTime: 'afterDraw',\n                                        id: 'bad', // optional\n                                        type: 'line',\n                                        mode: 'horizontal',\n                                        scaleID: 'y-axis-0',\n                                        value: '70',\n                                        borderColor: 'rgba(255, 25, 25, 0.8)',\n                                        borderWidth: 2,\n                                        borderDash: [10, 5]\n                                    }\n                                ]\n                            }\n                        }\n                    });\n                });\n            });\n          });\n\n    }\n  render() {\n      return (\n          <div>\n          </div>\n      )\n  }\n}\n","import React from 'react';\nimport '../App.css';\nimport Chart from \"chart.js\";\nimport IoTChart from '../components/IoTChart.js'\n\n\n\nfunction makeAPIRequest(userType) {\n    var baseAPIURL = 'https://cors-anywhere.herokuapp.com/https://noise-wearable.herokuapp.com/api/noise_observation/user/';\n    baseAPIURL = baseAPIURL + userType;\n    console.log(\"making api call (users)\");\n    return fetch(baseAPIURL)\n        .then((response) => {\n            return response.json();\n        })\n        .then(json => {\n            var jsonTest = json;\n            return jsonTest;\n        });\n\n}\n\nfunction makeAPIRequestUsers() {\n    console.log(\"making user api call\");\n    return fetch('https://cors-anywhere.herokuapp.com/https://noise-wearable.herokuapp.com/api/users')\n        .then((response) => {\n            return response.json();\n        })\n        .then(json => {\n            var jsonTest = json;\n            return jsonTest;\n        });\n}\n\nfunction getLoudestOne(time, loudness, unixStorage)\n{\n    if(time in unixStorage){\n        if (unixStorage[time] < loudness) {\n            unixStorage[time] = loudness\n        }\n    }\n    else {\n        unixStorage[time] = loudness\n    }\n}\n\nfunction makeNiceTime(dateObj)\n{\n  var hours = dateObj.getHours();\n  // Get minutes part from the timestamp\n  var minutes = dateObj.getMinutes();\n  // Get seconds part from the timestamp\n  var ampm = hours >= 12 ? 'pm' : 'am';\n  hours = hours % 12;\n  hours = hours ? hours : 12; // the hour '0' should be '12'\n  minutes = minutes < 10 ? '0'+minutes : minutes;\n  var strTime = hours + ':' + minutes + ' ' + ampm;\n  return strTime;\n\n}\n\nfunction updateChartHelper(chart, label, data){\n  //this is what actually updates the charts\n    for (var i = 0; i < label.length; i++) {\n        if (chart.data.labels.includes(label[i]) == false) {\n            chart.data.datasets[0].data.push(data[i]);\n            chart.data.labels.push(label[i]);\n        }\n    }\n  chart.update();\n}\n\nfunction updateChartMethod(value)\n{\n  var promiseA = makeAPIRequestUsers().then(devices => {\n      var jsonUsers = JSON.stringify(devices);\n      jsonUsers = JSON.parse(jsonUsers);\n      jsonUsers.map(function (e) {\n        var promiseB = makeAPIRequest(e.user_id).then(info => {\n            var json = JSON.stringify(info);\n            json = JSON.parse(json);\n            var today = Math.floor(new Date().getTime()/1000.0);\n            var past = Math.round(today - 7200);\n            var filteredJson = json.filter(function (e) {\n                if (e.time_obs >= past && e.time_obs < today) {\n                    return e.time_obs;\n                }\n            }\n            );\n            var dict = new Object();\n            filteredJson.map(function (e) {\n                var timeStampDate = new Date(e.time_obs * 1000);\n                var niceTime = makeNiceTime(timeStampDate);\n                getLoudestOne(niceTime, e.db_reading, dict);\n            });\n            var label = Object.keys(dict).reverse();\n            var data = Object.values(dict).reverse();\n            updateChartHelper(window['chart'+e.user_id],label,data);\n            setTimeout(function () { updateChartMethod(value - 1); }, 60000);\n        });\n      });\n    });\n}\n\nconst Home = () => {\n    return (\n        <div>\n            <h1>Noise Manager WebApp</h1>\n            <p>Real time data of each section/device</p>\n            <div id=\"chartContainer\">\n                <IoTChart />\n            </div>\n          \n            <script>\n                $(document).ready(function() {\n                 setTimeout(function () { updateChartMethod(100); }, 70000)\n            };\n            </script>\n      </div>\n    );\n}\n\nexport default Home;\n","import React from 'react';\n\nfunction makeAPIRequest(userType) {\n    var baseAPIURL = 'https://cors-anywhere.herokuapp.com/https://noise-wearable.herokuapp.com/api/noise_observation/user/';\n    baseAPIURL = baseAPIURL + userType\n    return fetch(baseAPIURL)\n        .then((response) => {\n            return response.json();\n        })\n        .then(json => {\n            return json;\n        });\n}\n\nfunction makeAPIRequestUsers() {\n    return fetch('https://cors-anywhere.herokuapp.com/https://noise-wearable.herokuapp.com/api/users')\n        .then((response) => {\n            return response.json();\n        })\n        .then(json => {\n            return json;\n        });\n}\n\nclass ReportTable extends React.Component {\n\n  componentDidMount() {\n    var curr = Math.floor(Date.now() / 1000);\n    // var pastDay =  Math.round(curr - 43200); //12 hours\n    var pastDay =  Math.round(curr - 86400); //24 hours\n    makeAPIRequestUsers()\n      .then((users) => {\n        var jsonUsers = JSON.stringify(users);\n        jsonUsers = JSON.parse(jsonUsers);\n        jsonUsers.forEach(function(e) {\n          makeAPIRequest(e.user_id)\n            .then((rawdata) => {\n              var data = JSON.stringify(rawdata);\n              data = JSON.parse(data);\n              var filteredJson = data.filter(function (e) {\n                if (e.time_obs >= pastDay && e.time_obs < curr) {\n                  return e.time_obs;\n                }\n              }\n              );\n\n              var peak = 0;\n              var avg = 0;\n              var peaktimes = {};\n\n              filteredJson.forEach((item, i) => {\n                avg += item.db_reading;\n                if (item.db_reading >= peak) {\n                  delete peaktimes[peak];\n                  peak = item.db_reading;\n                  var time = new Date(item.time_obs * 1000);\n                  if (peaktimes[item.db_reading]) {\n                    peaktimes[item.db_reading].push(time.toLocaleString());\n                  }\n                  else {\n                    peaktimes[item.db_reading] = [time.toLocaleString()];\n                  }\n                }\n              })\n              console.log(\"peaktimes\");\n              console.log(peaktimes);\n              var d1 = document.getElementById('table');\n              d1.insertAdjacentHTML('beforeend', '<tr><td>'+e.user_id+'</td><td>'+ Math.round(avg/data.length)+'</td><td>'+ peak +'</td><td>'+ peaktimes[peak] +'</tr>');\n            })\n        })\n      })\n  }\n\n    render() {\n        return (\n          <div>\n              <h3>Daily Summary Table</h3>\n              <table>\n              <tbody id=\"table\">\n                <tr>\n                 <th id=\"table-header\">Section Name</th>\n                 <th id=\"table-header\">Average dB</th>\n                 <th id=\"table-header\">Peak dB</th>\n                 <th id=\"table-header\">Peak dB Time</th>\n                </tr>\n                </tbody>\n              </table>\n          </div>\n        );\n  }\n}\nexport default ReportTable;\n","import React from 'react';\nimport { Line } from 'react-chartjs-2';\nlet color_count = 0;\n\n\nfunction getAvgHourlyData( json_data ) { //Gathers the db Levels of each hour from the json and finds avg db level per hr\n  var peak = 0;\n  var peaktimes = {};\n  let avg = 0;\n  let avgBase = 0;\n\n    let last_12hours = [];\n    let activeHour = 0;\n    let dbAvg = 0;\n    let hourlyNumCount = 0;\n    let final_result = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];//25\n    let zero_hr = 0;\n    let zeroNumCount = 0;\n\n    var today = new Date();\n    for(let i = 0; i < json_data.length ; i++) {\n        var time = new Date( json_data[i].time_obs *1000 );\n        if( time.getDate() > today.getDate()-1 && time.getHours() < today.getHours() ) {// This only checks if the data is on the 2 day list limit until current time\n            if( activeHour == 0 ) {\n                activeHour = time.getHours();\n            } else if ( time.getHours() != activeHour ) { //Runs this if it's a new hour\n                 if ( time.getDate() == today.getDate()  && activeHour <= today.getHours()) {\n                    last_12hours.push( [Math.round(dbAvg / hourlyNumCount), activeHour ])\n                    activeHour = time.getHours();\n                    dbAvg = 0;\n                    hourlyNumCount = 0;\n                }\n            } \n            \n             if ( activeHour == 0 ) {\n                zero_hr+= json_data[i].db_reading;\n                zeroNumCount++;\n            } else {\n                dbAvg+= json_data[i].db_reading;\n                hourlyNumCount++;\n            }\n        }\n        dbAvg+= json_data[i].db_reading;\n        if (json_data[i].db_reading >= peak) {\n          delete peaktimes[peak];\n          peak = json_data[i].db_reading;\n          if (peaktimes[json_data[i].db_reading]) {\n            peaktimes[json_data[i].db_reading].push(time.toLocaleString());\n          }\n          else {\n            peaktimes[json_data[i].db_reading] = [time.toLocaleString()];\n          }\n        }\n        hourlyNumCount++;\n\n    }\n\n    last_12hours.push( [Math.round(zero_hr / zeroNumCount), 0 ]) //adds 12AM time\n\n    let startIndex = 24-today.getHours();\n\n    for( var i=0; i < last_12hours.length; i++){ \n        final_result[startIndex] = last_12hours[(last_12hours.length-1)-i][0];\n        startIndex++;\n    }\n\n    for( var s = 0; s < last_12hours.length; s++){ // Loops through the list to put it on the final list that is shown in the data\n        if (last_12hours[s][0] !== 0) {\n          avg += last_12hours[s][0];\n          avgBase++;\n        }\n}\n\n    return [final_result, Math.round(avg/avgBase), peak, peaktimes[peak]];\n}\n\nfunction createDataset( user_file, user ) { //Creates a dataset given the json file\n\n    const colors = [ 'rgb(25, 129, 102)', 'rgba(171,185,255)', 'rgb(19, 72, 250)', 'rgb(174, 255, 171)', 'rgb(255, 205, 139)', 'rgb(252, 58, 113)', 'rgb(232, 222, 46)', 'rgb(178, 62, 207)', 'rgb(158, 56, 5)'];\n    var help = getAvgHourlyData( user_file )\n    let result = {\n        label: user,\n        fill:false,\n        backgroundColor: colors[color_count],\n        borderColor: colors[color_count],\n         data: help[0],\n        avg: help[1],\n        peak: help[2],\n        peaktimes: help[3]\n    };\n    color_count++;\n    return result;\n}\n\n\n\nvar chartOptions = {\n    showScale: true,\n    pointDot: true,\n    title: {\n        display: true,\n        text: 'Average Noise Levels in the Past 24 Hours (Hourly)',\n        fontSize:20\n    },\n    scales: {\n        yAxes: [{\n            scaleLabel: {\n                display: true,\n                labelString: 'Noise (dB) Levels'\n            }\n          }]\n       }\n\n}\n\nfunction makeAPIRequest(userType) {\n    let api_site = 'https://cors-anywhere.herokuapp.com/https://noise-wearable.herokuapp.com/api/noise_observation/user/'+ userType;\n    return fetch( api_site )\n        .then((response) => {\n            return response.json();\n        })\n        .then(json => {\n            var jsonTest = json;\n            return jsonTest;\n        });\n}\n\n\nfunction makeAPIRequestUsers() {\n    return fetch('https://cors-anywhere.herokuapp.com/https://noise-wearable.herokuapp.com/api/users')\n        .then((response) => {\n            return response.json();\n        })\n        .then(json => {\n            var jsonTest = json;\n            return jsonTest;\n        });\n}\n\nfunction getTimeAxis() { // returns a list of all labels for the 24 hr time frame\n\n    let axis_list = [];\n    const time_stamps = [ [13, 1], [14, 2], [15, 3], [16, 4], [17, 5], [18, 6], [19, 7], [20, 8], [21, 9], [22, 10], [23, 11], [24, 12]];\n    var today = new Date();\n    let currentHr = today.getHours();\n    for(let i = 0; i < 25 ; i++) { \n        let decrementedHr = currentHr - i;\n        if( decrementedHr >= 12 ) {//Checks if time is after 12pm \n            if(decrementedHr == 12) { axis_list.unshift( decrementedHr + 'PM' ); }\n            for(let a = 0; a < time_stamps.length ; a++) { \n                if( time_stamps[a][0] == decrementedHr){  axis_list.unshift( time_stamps[a][1] + 'PM' );}\n            }\n        } else if ( decrementedHr == 0) {\n            axis_list.unshift( '12AM');\n            currentHr = i + 24; \n        } else if( decrementedHr < 12) {\n            axis_list.unshift( decrementedHr + 'AM' );\n        } \n    }\n    return axis_list;\n}\n\n\n\nclass ReportChart extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.chartReference = React.createRef();\n        this.label = getTimeAxis();\n        this.state = {\n            chartData:\n             {\n                labels: this.label,\n                datasets: []\n             },\n             json_files: []\n        };\n\n    }\n\n\n\n    componentDidMount() { //Sets the state of datasets from the json files that are present\n\n        let dataset_list = [];\n\n        var promiseA = makeAPIRequestUsers().then(devices => { // Makes API request to get current users list\n            var jsonUsers = JSON.stringify(devices);\n            jsonUsers = JSON.parse(jsonUsers);\n            jsonUsers.forEach((item, i) => {\n                var api_data = makeAPIRequest(item.user_id).then(info => { //Loops through each user to create dataset and pushes it to the state\n                    var json = JSON.stringify(info);\n                    json = JSON.parse(json);\n                    var dataset = createDataset( json, json[0].user_id );\n                    console.log(dataset);\n                    dataset_list.push( dataset);\n                    if ( dataset_list.length == jsonUsers.length) {\n                        getTimeAxis();\n                        this.setState({\n                            chartData: {\n                                datasets: dataset_list\n                            }\n                        });\n                        return dataset_list;\n                    }\n                });\n        });\n\n    });\n\n}\n        render() {\n            return (\n              <div>\n                <div className='lineChart'>\n                    <Line\n                    ref={this.chartReference}\n                    data={this.state.chartData}\n                    options={chartOptions}\n                    height={250}\n                    width={600}\n                    />\n                </div>\n                <br></br><br></br>\n                <div>\n                    <h3>Daily Summary Table</h3>\n                    <table>\n                    <tbody>\n                      <tr>\n                       <th id=\"table-header\">Section Name</th>\n                       <th id=\"table-header\">Average dB</th>\n                       <th id=\"table-header\">Peak dB</th>\n                       <th id=\"table-header\">Peak dB Time</th>\n                      </tr>\n                      {this.state.chartData.datasets.map((item) =>\n                        <tr key={item.label}>\n                        <td>{item.label}</td>\n                        <td>{item.avg}</td>\n                        <td> {item.peak}</td>\n                        <td>{item.peaktimes}</td>\n                        </tr>\n                      )}\n                      </tbody>\n                    </table>\n                </div>\n                </div>\n            );\n        }\n    }\n\n\n  export default ReportChart;\n","import React from 'react';\nimport ReportTable from '../components/ReportTableAPI';\nimport ReportChart from '../components/ReportChart';\nimport Button from 'react-bootstrap/Button';\n\n\nconst Report = () => {\n   var curr = new Date();\n   function printPage(e) {\n     e.preventDefault();\n     window.print();\n   }\n    return (\n       <div>\n        <div className=\"no-print print-btn\">\n          <Button variant=\"info\" size=\"lg\" onClick={printPage}>Print report</Button>\n        </div>\n\n          <h1>Your Noise Report Summary</h1>\n          <p>Generated on <b>{ curr.toLocaleDateString() }</b></p>\n\n          <ReportChart/>\n          <br></br>\n          <br></br>\n          {/*<ReportTable/>*/}\n       </div>\n    );\n}\n\nexport default Report;\n","import React from 'react';\n\nconst Help = () => {\n    return (\n       <div>\n          <h1>Help</h1>\n          <p>Please contact UCI's team Chubby Cats.</p>\n          <p>ziv@uci.edu</p>\n       </div>\n    );\n}\n\nexport default Help;\n","import React, { Component } from 'react';\n\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Container from 'react-bootstrap/Container';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\n\nimport {\n  HashRouter,\n  Route,\n  Link,\n  NavLink,\n  Switch,\n  Redirect\n} from 'react-router-dom';\n\n//Pages\nimport Home from './pages/Home.js';\nimport Report from './pages/Report';\nimport Help from './pages/Help';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <Container>\n        <HashRouter basename='/'>\n              <Navbar bg=\"dark\" variant=\"dark\" expand=\"sm\" >\n                <Navbar.Brand as={Link} to=\"/\">Wall Mount Tracking</Navbar.Brand>\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\"/>\n                <Navbar.Collapse id=\"basic-navbar-nav\">\n                  <Nav className=\"mr-auto\">\n                    <Nav.Link as={NavLink} to=\"/host-website\">Home</Nav.Link>\n                    <Nav.Link as={NavLink} to=\"/report\">Report</Nav.Link>\n                    <Nav.Link as={NavLink} to=\"/help\">Help</Nav.Link>\n                  </Nav>\n                </Navbar.Collapse>\n              </Navbar>\n              < br />\n              <Switch>\n                <Route exact path='/host-website' component={Home}/>\n                <Route exact path='/report' component={Report}/>\n                <Route exact path='/help' component={Help}/>\n                <Redirect from=\"/\" to=\"/host-website\"/>\n              </Switch>\n          </HashRouter>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter as Router } from 'react-router-dom';\n\nReactDOM.render(<Router>< App /></Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}